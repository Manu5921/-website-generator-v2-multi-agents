// =============================================================================
// üöÄ ROUTE CR√âATION CAMPAGNE TEST GOOGLE ADS - BUDGET 50‚Ç¨
// =============================================================================

import { NextRequest, NextResponse } from 'next/server';
import { googleAdsClient, CreateCampaignData } from '@/lib/ads-management/google-ads-client';
import { db } from '@/lib/db';
import { parametresSysteme } from '@/lib/db/schema';
import { eq } from 'drizzle-orm';

/**
 * Cr√©er une campagne de test Google Ads avec budget limit√©
 */
export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ Cr√©ation campagne test Google Ads (Budget 50‚Ç¨)...');

    const body = await request.json();
    const { siteId } = body;

    if (!siteId) {
      return NextResponse.json({
        success: false,
        error: 'Site ID manquant',
      }, { status: 400 });
    }

    // V√©rifier la pr√©sence des tokens
    const refreshTokenResult = await db.select()
      .from(parametresSysteme)
      .where(eq(parametresSysteme.cle, 'google_ads_refresh_token'))
      .limit(1);

    if (refreshTokenResult.length === 0) {
      return NextResponse.json({
        success: false,
        error: 'Google Ads non configur√©. Veuillez d\'abord vous authentifier.',
        requiresAuth: true,
      }, { status: 401 });
    }

    // Configuration de la campagne test selon les consignes
    const testCampaignData: CreateCampaignData = {
      name: `Site Web IA - Test ${new Date().toLocaleDateString('fr-FR')}`,
      type: 'SEARCH',
      budget: 50, // Budget limit√© √† 50‚Ç¨ selon les consignes
      targetCPA: 25, // CPA cible √† 25‚Ç¨ pour optimiser les conversions
      keywords: [
        // Mots-cl√©s selon les consignes
        'g√©n√©ration site web IA',
        'cr√©ation site automatique',
        'site web automatique IA',
        'g√©n√©rateur site web',
        'cr√©ation site internet IA',
        'site web intelligence artificielle',
        'cr√©ation site web rapide',
        'site web PME automatique',
        'g√©n√©rateur site restaurant',
        'site web coiffeur automatique',
        'cr√©ation site artisan IA',
      ],
      geoTargeting: ['France'], // Ciblage France selon les consignes
      audiences: [
        {
          type: 'CUSTOM_INTENT',
          name: 'PME Secteurs Cibl√©s',
          interests: [
            'restaurant',
            'coiffeur', 
            'artisan',
            'services locaux',
            'petite entreprise',
          ],
        },
      ],
    };

    // Cr√©er la campagne
    const campaignId = await googleAdsClient.createCampaign(siteId, testCampaignData);

    // Sauvegarder les informations de la campagne test
    await db.insert(parametresSysteme).values({
      cle: 'google_ads_test_campaign_id',
      valeur: campaignId,
      description: 'ID de la campagne test Google Ads (50‚Ç¨ budget)',
      sensible: false,
    }).onConflictDoUpdate({
      target: parametresSysteme.cle,
      set: {
        valeur: campaignId,
        dateModification: new Date(),
      },
    });

    // Programmer le suivi des m√©triques
    await scheduleMetricsTracking(campaignId, siteId);

    console.log('‚úÖ Campagne test cr√©√©e avec succ√®s:', campaignId);

    return NextResponse.json({
      success: true,
      campaignId,
      campaignName: testCampaignData.name,
      budget: testCampaignData.budget,
      keywords: testCampaignData.keywords,
      message: 'Campagne test cr√©√©e avec succ√®s. Validation requise avant activation.',
      nextSteps: [
        'V√©rifier la configuration de la campagne',
        'Valider les mots-cl√©s et audiences',
        'Activer la campagne apr√®s approbation',
        'Surveiller les performances en temps r√©el',
      ],
    });

  } catch (error) {
    console.error('‚ùå Erreur cr√©ation campagne test:', error);

    return NextResponse.json({
      success: false,
      error: 'Erreur lors de la cr√©ation de la campagne test',
      details: error instanceof Error ? error.message : 'Erreur inconnue',
    }, { status: 500 });
  }
}

/**
 * Obtenir le statut de la campagne test
 */
export async function GET(request: NextRequest) {
  try {
    console.log('üìä R√©cup√©ration statut campagne test...');

    // R√©cup√©rer l'ID de la campagne test
    const testCampaignResult = await db.select()
      .from(parametresSysteme)
      .where(eq(parametresSysteme.cle, 'google_ads_test_campaign_id'))
      .limit(1);

    if (testCampaignResult.length === 0) {
      return NextResponse.json({
        success: true,
        testCampaign: null,
        message: 'Aucune campagne test trouv√©e',
      });
    }

    const campaignId = testCampaignResult[0].valeur;

    // R√©cup√©rer les m√©triques de la campagne
    try {
      const today = new Date().toISOString().split('T')[0];
      const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
      
      const metrics = await googleAdsClient.getCampaignMetrics(weekAgo, today);
      const campaignMetrics = metrics.filter(m => m.campaignId === campaignId);

      // Calculer les totaux
      const totals = campaignMetrics.reduce((acc, metric) => ({
        impressions: acc.impressions + metric.impressions,
        clicks: acc.clicks + metric.clicks,
        cost: acc.cost + metric.cost,
        conversions: acc.conversions + metric.conversions,
        conversionValue: acc.conversionValue + metric.conversionValue,
      }), {
        impressions: 0,
        clicks: 0, 
        cost: 0,
        conversions: 0,
        conversionValue: 0,
      });

      // Calculer les m√©triques d√©riv√©es
      const ctr = totals.impressions > 0 ? (totals.clicks / totals.impressions * 100) : 0;
      const cpc = totals.clicks > 0 ? (totals.cost / totals.clicks) : 0;
      const cpa = totals.conversions > 0 ? (totals.cost / totals.conversions) : 0;
      const roas = totals.cost > 0 ? (totals.conversionValue / totals.cost) : 0;

      return NextResponse.json({
        success: true,
        testCampaign: {
          campaignId,
          status: 'active',
          budget: 50,
          metrics: {
            period: '7 derniers jours',
            impressions: totals.impressions,
            clicks: totals.clicks,
            cost: Math.round(totals.cost * 100) / 100,
            conversions: totals.conversions,
            conversionValue: Math.round(totals.conversionValue * 100) / 100,
            ctr: Math.round(ctr * 100) / 100,
            cpc: Math.round(cpc * 100) / 100,
            cpa: Math.round(cpa * 100) / 100,
            roas: Math.round(roas * 100) / 100,
          },
          performance: {
            budgetUsed: totals.cost,
            budgetRemaining: Math.max(0, 50 - totals.cost),
            dailyAverage: Math.round((totals.cost / 7) * 100) / 100,
            projection: {
              monthly: Math.round((totals.cost / 7 * 30) * 100) / 100,
              conversionRate: totals.clicks > 0 ? Math.round((totals.conversions / totals.clicks * 100) * 100) / 100 : 0,
            },
          },
        },
        message: 'M√©triques campagne test r√©cup√©r√©es avec succ√®s',
      });

    } catch (metricsError) {
      console.warn('‚ö†Ô∏è Impossible de r√©cup√©rer les m√©triques:', metricsError);
      
      return NextResponse.json({
        success: true,
        testCampaign: {
          campaignId,
          status: 'created',
          budget: 50,
          message: 'Campagne cr√©√©e, m√©triques en cours de collecte',
        },
      });
    }

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration statut campagne:', error);

    return NextResponse.json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration du statut',
      details: error instanceof Error ? error.message : 'Erreur inconnue',
    }, { status: 500 });
  }
}

/**
 * Programmer le suivi des m√©triques
 */
async function scheduleMetricsTracking(campaignId: string, siteId: string): Promise<void> {
  try {
    // Sauvegarder la configuration de tracking
    const trackingConfig = {
      campaignId,
      siteId,
      trackingEnabled: true,
      lastSync: new Date().toISOString(),
      syncFrequency: 'hourly', // Selon les consignes pour le temps r√©el
      alertThresholds: {
        dailyBudget: 10, // Alerte si plus de 10‚Ç¨/jour
        cpa: 30, // Alerte si CPA > 30‚Ç¨
        ctr: 1, // Alerte si CTR < 1%
      },
    };

    await db.insert(parametresSysteme).values({
      cle: 'google_ads_tracking_config',
      valeur: JSON.stringify(trackingConfig),
      description: 'Configuration du tracking automatique Google Ads',
      sensible: false,
    }).onConflictDoUpdate({
      target: parametresSysteme.cle,
      set: {
        valeur: JSON.stringify(trackingConfig),
        dateModification: new Date(),
      },
    });

    console.log('‚úÖ Tracking automatique configur√©');

  } catch (error) {
    console.error('‚ùå Erreur configuration tracking:', error);
    throw error;
  }
}