#!/bin/bash

# üö® SCRIPT DE VALIDATION PR√â-D√âPLOIEMENT
# Obligatoire avant tout d√©ploiement Vercel

echo "üîç VALIDATION PR√â-D√âPLOIEMENT - D√âMARRAGE"
echo "=========================================="

# Couleurs pour output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Compteur d'erreurs
ERRORS=0

echo -e "${BLUE}üìã CHECKLIST OBLIGATOIRE${NC}"
echo ""

# 1. V√©rification Node modules
echo "1. üîç V√©rification dependencies..."
if [ ! -d "node_modules" ]; then
    echo -e "${RED}‚ùå node_modules manquant${NC}"
    ((ERRORS++))
else
    echo -e "${GREEN}‚úÖ node_modules pr√©sent${NC}"
fi

# 2. V√©rification package.json
echo "2. üì¶ V√©rification package.json..."
if [ ! -f "package.json" ]; then
    echo -e "${RED}‚ùå package.json manquant${NC}"
    ((ERRORS++))
else
    echo -e "${GREEN}‚úÖ package.json pr√©sent${NC}"
fi

# 3. Test build local
echo "3. üî® Test build local..."
if npm run build > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Build r√©ussi${NC}"
else
    echo -e "${RED}‚ùå Build √©chou√© - ARR√äT${NC}"
    echo -e "${YELLOW}üí° Corriger les erreurs de build avant d√©ploiement${NC}"
    exit 1
fi

# 4. V√©rification des ports (pas 3000)
echo "4. üö™ V√©rification configuration ports..."
if grep -q "3000" package.json; then
    echo -e "${YELLOW}‚ö†Ô∏è  Port 3000 d√©tect√© dans package.json${NC}"
    echo -e "${YELLOW}üí° Recommandation : utiliser port 3040+${NC}"
else
    echo -e "${GREEN}‚úÖ Configuration ports OK${NC}"
fi

# 5. V√©rification des imports Heroicons
echo "5. üé® V√©rification imports Heroicons..."
HEROICONS_ERRORS=$(grep -r "ChefHatIcon\|CookieIcon\|KnifeIcon" src/ || true)
if [ ! -z "$HEROICONS_ERRORS" ]; then
    echo -e "${RED}‚ùå Icons invalides d√©tect√©es :${NC}"
    echo "$HEROICONS_ERRORS"
    ((ERRORS++))
else
    echo -e "${GREEN}‚úÖ Icons Heroicons valides${NC}"
fi

# 6. V√©rification des images Unsplash
echo "6. üñºÔ∏è  V√©rification int√©gration images..."
if grep -r "emoji\|placeholder\|üçΩÔ∏è\|üë®‚Äçüç≥" src/ > /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Emojis/placeholders d√©tect√©s${NC}"
    echo -e "${YELLOW}üí° Remplacer par vraies photos Unsplash${NC}"
else
    echo -e "${GREEN}‚úÖ Int√©gration images professionnelles${NC}"
fi

# 7. V√©rification glassmorphism
echo "7. ‚ú® V√©rification effets glassmorphism..."
if grep -r "glass-\|backdrop-blur\|glassmorphism" src/ > /dev/null; then
    echo -e "${GREEN}‚úÖ Effets glassmorphism appliqu√©s${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Effets glassmorphism manquants${NC}"
    echo -e "${YELLOW}üí° Ajouter CSS glassmorphism pour niveau premium${NC}"
fi

# 8. V√©rification Framer Motion
echo "8. üé¨ V√©rification animations Framer Motion..."
if grep -r "motion\.\|initial=\|animate=" src/ > /dev/null; then
    echo -e "${GREEN}‚úÖ Animations Framer Motion pr√©sentes${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Animations Framer Motion manquantes${NC}"
fi

# 9. V√©rification responsive design
echo "9. üì± V√©rification responsive design..."
if grep -r "sm:\|md:\|lg:\|xl:" src/ > /dev/null; then
    echo -e "${GREEN}‚úÖ Classes responsive Tailwind pr√©sentes${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Classes responsive manquantes${NC}"
fi

# 10. V√©rification environnement
echo "10. üåç V√©rification variables environnement..."
if [ -f ".env.local" ] || [ -f ".env" ]; then
    echo -e "${GREEN}‚úÖ Fichiers environnement pr√©sents${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Fichiers .env manquants${NC}"
fi

echo ""
echo "=========================================="

# R√©sultat final
if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}üéâ VALIDATION R√âUSSIE - PR√äT POUR D√âPLOIEMENT${NC}"
    echo -e "${GREEN}‚úÖ Tous les checks sont pass√©s${NC}"
    echo ""
    echo -e "${BLUE}üìã PROCHAINES √âTAPES :${NC}"
    echo "1. npx vercel --prod"
    echo "2. Tester l'URL de production"
    echo "3. Demander validation utilisateur"
    echo ""
    exit 0
else
    echo -e "${RED}üö® VALIDATION √âCHOU√âE - ${ERRORS} ERREUR(S)${NC}"
    echo -e "${RED}‚ùå Corriger les erreurs avant d√©ploiement${NC}"
    echo ""
    echo -e "${YELLOW}üí° ACTIONS REQUISES :${NC}"
    echo "1. Corriger les erreurs list√©es ci-dessus"
    echo "2. Relancer ./scripts/validation-pre-deploy.sh"
    echo "3. D√©ployer seulement si validation ‚úÖ"
    echo ""
    exit 1
fi